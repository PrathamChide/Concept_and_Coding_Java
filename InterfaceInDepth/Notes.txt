-> What is Interface?
Interface is something which helps 2 system to interact with each other, without one system has to know the details of other.
OR
In simple terms I can say that it helps to achieve ABSTRACTION.

-> How to define the interface?
Interface declaration consists of
- Modifiers
- "interface" keyword
- Interface Name
- Comma separated list of parent interfaces
- Body

Only public & default methods are allowed(protected & private are ot allowed)
public interface Bird{
    public void fly();
}
interface Bird(){
    public void fly();
}

Comma Separated list of parent interfaces(it can extend from class)
Ex:
public interface NonFlyingBirds extends Birds, LivingThings{
    public void canRun();
}

Why we need Abstraction?
1. Abstraction
Using interface we can achieve full Abstraction means we define What class must do, but not How it will do
public interface Bird{
    public void fly();
}
public class Eagle implements Bird{
    @Override
    public void fly(){
        //code implements here
    }
}

2. Polymorphism
- Interface can be used as a Data Type
- We cannot create the object of an interface, but it can hold the reference of all the classes which implements it.
- And at runtime, it decides which method need to be invoked.

3. Multiple Inheritance
- In Java, Multiple Inheritance is possible only through interface only.
Diamond Problem->
public class WaterAnimal{
    public boolean canBreathe(){
        return true;
    }
}
public class LandAnimal{
    public boolean canBreathe(){
        return true;
    }
}
public class Crocodile extends WaterAnimal, LandAnimal{

}
public class Main{
    Crocodile obj = new Crocodile();
    obj.canBreathe;
}
So, Here the main function faces the ambiguity that which method to be implemented LandAnimal or WaterAnimal

Solution:
For this Ambiguity resolution, interface can be implemented

Method in Interface
- All methods are implicit public only.
- Method cannot be declared as final.
public interface Bird{
    void fly();
    public void hasBeak();
}

Fields in Interface
- Fields are public, static, and final implicitly(CONSTANTS)
- You cannot make field private or protected
public interface Bird{
    int MAX_HEIGHT_IN_FEET = 2000;
}
//implicitly looks like
public interface Bird{
    public static final int MAX_HEIGHT_IN_FEET = 2000;
}

Interface Implementation
- Overriding method cannot have more restrict access specifiers (public ---x---> protected (not allowed))
- Concrete class must override all the methods declared in the interface.
- Abstract class are not forced to override all the methods.
- A class can implement from multiple interface.

Nested Interface
- Nested Interface declared within another interface
- Nested Interface declared within a class

Generally it is used to group, logical related interfaces and nested interface

Rules:->
- A nested interface declared within an interface must be public.
- A nested interface declared within a class can have any access modifiers
- When you implement outer interface, inner interface implementation is not required & vice versa.

Interface:->
- Keyword = "interface"
- Child class use "implements"
- It can only have abstract methods
- It can only extend from other interfaces
- Variable are by default CONSTANT
- Variables and methods are by default public
- Multiple inheritance is supported by this in Java
- It cannot provide implementation of any other interface or abstract class
- It cannot have constructor
- No need of any keyword to make method abstract, by default it is public.

Abstract Class:->
- Keyword = "abstract"
- Child classes used "extends"
- It can have both abstract and non-abstract methods.
- It can extend from other classes & multiple interfaces
- Variables can be static, non-static, final, non-final etc...
- Variables & Methods can be private, protected, public or default.
- Multiple Inheritance is not supported
- It can provide the implementation of interface
- It can have constructor
- To declare the method abstract, we have to use "abstract" keyword & it can be protected, public, default.

Java8 Interface features:
- Default method
- Static Method
- Functional interface & Lambda Expression

Java9 interface features:
- private method
- private static method

Java8 and Java9 Features:->
1. Default Method(Java8)
- Before Java8 interface can have only Abstract Method and all child classes has to provide abstract method
implementation.
- Any new method added in interface, means need to change in all its implementation.
-> Why Default method was introduced?
- To add functionality in existing legacy interface we need to use default method
Ex: Stream() method in collection interface

Default and Multiple Inheritance, How to Handle:
Given in HandleDefaultMultipleInheritance

How to extend interface that contains Default Method
Given in ExtendInterface(FirstWay, SecondWay, ThirdWay)

2. Static Method(Java8)
- We can provide the implementation of the method in interface
- But it cannot be overridden by classes which implement the interface.
- We can access it using interface name itself
- Its by default public

3. Private Method & Private Static Method(Java9)
- We can provide the implementation of method but as a private access modifier in interface.
- It brings more readability of the code.
For ex: if multiple default method share static same code, that this can help
- It can be defined as static and non-static
- In static method we can call only private static interface method
- Private static method, can be called from both static and non-static method.
- Private interface method, cannot be abstract means we have to provide the definition.
- It can be used inside the particular interface only.

Functional Interface and Lambda Expression
- What if Functional Interface?
- If an Interface contains only 1 abstract method, that is known as Functional Interface
- Also known as SAM Interface(Single Abstract Method)
- @FunctionalInterface keyword can be used at top of the interface(But it is optional)

-> @FunctionalInterface Annotation restrict us and throws compilation error, if we try to add more than
   one abstract method.
-> In FunctionalInterface only one abstract method is allowed but we can use other methods like default, static method
   or methods inherited from Object class
public interface TestInterface {
   String toString(); // For Object Class Method no need of implementation
}

What is Lambda Expression?
- Lambda Expression is a way to implement the functional interface

Different Ways to implement the Functional Interface
1. Using "implements"
2. Using "anonymous class"
3. Using "Lambda Expression"

Types of Functional Interface
1. Consumer
- Represent an operation that accept a single input parameter and returns no results
- Present in package: java.util.function;

2. Supplier
- Represent the supplier of the result. Accepts no input parameter but produce a result.
- Present in package: java.util.function;

3. Function
- Represent function, that accepts one argument process it and produce a result
- Present in package: java.util.function;

4. Predicate
- Represent function, that accept one argument and return the boolean
- Present in package: java.util.function;

-> Handle use case when Functional Interface extends from other interface:
Use Case 1: Functional Interface extending Non-Functional Interface -> HandleCases.UseCase1
Use Case 2: Interface extending Functional Interface -> HandleCases.UseCase2
Use Case 3: Functional Interface extending Other Functional Interface -> HandleCases.UseCase3


